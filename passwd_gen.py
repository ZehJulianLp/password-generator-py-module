#!/usr/bin/env python3

# This is a python module to generate a password based on the MAC address and CPU serial number of a computer.
# The password is generated by concatenating the MAC address and CPU serial number and hashing the result with SHA-256.
# The first 64 characters of the hash are used as the password.
# The password is returned as a string.
# The module also contains functions to get the MAC address and CPU serial number of the computer.
# The module is tested to work on Windows and Linux.

# The module contains the following functions:
# - get_mac_address: Returns the MAC address of the computer as a string.
# - get_cpu_serial_number: Returns the CPU serial number of the computer as a string.
# - generate_password: Generates a password based on the MAC address and CPU serial number of the computer.
#   The function takes an integer length as a parameter and returns a string of the specified length.
#   The length must be at least 1 and at most 64.
#   If the length is not valid, the function raises a ValueError.

import hashlib
import re
import subprocess
import platform

def get_mac_address():
    try:
        if platform.system() == "Windows":
            result = subprocess.check_output(['ipconfig', '/all'])
            mac = re.search(r'([0-9A-F]{2}[:-]){5}([0-9A-F]{2})', result.decode('cp850', errors='ignore')).group(0)
            return mac
        elif platform.system() == "Linux":
            result = subprocess.check_output(['ifconfig'])
            mac = re.search(r'(\w\w:\w\w:\w\w:\w\w:\w\w:\w\w)', result.decode(errors='ignore')).group(0)
            return mac
    except Exception as e:
        print("Error getting MAC address:", e)
        return None

def get_cpu_serial_number():
    try:
        if platform.system() == "Windows":
            result = subprocess.check_output(['wmic', 'cpu', 'get', 'ProcessorId'])
            serial_number = re.search(r'([a-zA-Z0-9]+)', result.decode(errors='ignore'))
            if serial_number:
                return serial_number.group(0)
        elif platform.system() == "Linux":
            result = subprocess.check_output(['cat', '/proc/cpuinfo'])
            serial_number = re.search(r'(?<=Serial\s*:\s*)([a-zA-Z0-9]+)', result.decode(errors='ignore'))
            if serial_number:
                return serial_number.group(0)
    except Exception as e:
        print("Error getting CPU serial number:", e)
        return None

def generate_password(length: int):
    if length < 1:
        raise ValueError("Password length must be at least 1.")
    elif length > 64:
        raise ValueError("Password length must be at most 64.")
    mac_address = get_mac_address()
    cpu_serial_number = get_cpu_serial_number()

    if mac_address and cpu_serial_number:
        unique_id = mac_address + cpu_serial_number
    else:
        print("Error: MAC address or CPU serial number not available.")
        return None

    password = hashlib.sha256(unique_id.encode()).hexdigest()[:length]

    return password

# Test, but only if this file is executed directly
if __name__ == "__main__":
    print("Generated password 8 characters long:", generate_password(8))
    print("Generated password 64 characters long:", generate_password(64))
